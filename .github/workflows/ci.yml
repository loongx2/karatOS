name: karatOS Build and Test

on:
  push:
    branches: [ main, develop, 'cicd_*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      build_type:
        descripti      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: ci-test-report
          path: ci_report.json
          retention-days: 30uild type (debug/release)'
        required: false
        default: 'debug'
        type: choice
        options:
        - debug
        - release

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Environment validation
  validate:
    name: Validate Environment
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check if CI should run
        id: check
        run: |
          # Skip CI for documentation-only changes
          if [ "${{ github.event.before }}" != "" ] && [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -qE '\.(md|txt|pdf)$' && ! git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -qvE '\.(md|txt|pdf)$'; then
              echo "should_run=false" >> $GITHUB_OUTPUT
            else
              echo "should_run=true" >> $GITHUB_OUTPUT
            fi
          else
            # Always run CI for initial pushes, force pushes, or when before commit is unavailable
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

  # Multi-architecture build and test
  build-and-test:
    name: Build and Test (${{ matrix.target }})
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_run == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        target: [arm, riscv]
        build_type: [release]
        
    container:
      image: rust:1.75-slim
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target/
          key: ${{ runner.os }}-target-${{ matrix.target }}-${{ matrix.build_type }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-${{ matrix.target }}-${{ matrix.build_type }}-
            ${{ runner.os }}-target-${{ matrix.target }}-
            
      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y \
            qemu-system-arm \
            qemu-system-riscv32 \
            qemu-system-misc \
            build-essential \
            git \
            curl \
            python3 \
            python3-pip
            
      - name: Install Rust targets
        run: |
          rustup target add thumbv7m-none-eabi riscv32imac-unknown-none-elf
          
      - name: Install Python dependencies
        run: |
          pip3 install --break-system-packages pyyaml toml requests
          
      - name: Make scripts executable
        run: chmod +x *.sh
        
      - name: Validate environment
        run: |
          rustc --version
          cargo --version
          qemu-system-arm --version
          qemu-system-riscv32 --version
          rustup target list --installed
          
      - name: Build ${{ matrix.target }} (${{ matrix.build_type }})
        run: |
          echo "Building ${{ matrix.target }} in ${{ matrix.build_type }} mode with clean"
          ./build.sh ${{ matrix.target }} ${{ matrix.build_type }} --clean --verbose
          
      - name: Test ${{ matrix.target }} with QEMU
        run: |
          echo "Testing ${{ matrix.target }} with QEMU (30s timeout)"
          ./build.sh ${{ matrix.target }} ${{ matrix.build_type }} --clean --test
          
      - name: Check binary size
        run: |
          case "${{ matrix.target }}" in
            arm) TRIPLE="thumbv7m-none-eabi" ;;
            riscv) TRIPLE="riscv32imac-unknown-none-elf" ;;
          esac
          
          BINARY="target/${TRIPLE}/${{ matrix.build_type }}/kernel"
          if [ -f "$BINARY" ]; then
            SIZE=$(stat -c%s "$BINARY")
            KB=$((SIZE / 1024))
            echo "Binary size: $SIZE bytes (${KB} KB)"
            echo "BINARY_SIZE=$SIZE" >> $GITHUB_ENV
          else
            echo "Error: Binary not found at $BINARY"
            exit 1
          fi
          
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: karatos-${{ matrix.target }}-${{ matrix.build_type }}
          path: |
            target/${{ matrix.target == 'arm' && 'thumbv7m-none-eabi' || 'riscv32imac-unknown-none-elf' }}/${{ matrix.build_type }}/kernel
          retention-days: 30
          
      # Run Python orchestrator testing
      - name: Run Python CI orchestrator
        run: |
          pip3 install --break-system-packages pyyaml toml requests pytest
          chmod +x ci/*.py
          python3 ci/test_runner.py \
            --targets ${{ matrix.target }} \
            --build-type ${{ matrix.build_type }} \
            --report
            
      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: ci-test-report-${{ matrix.target }}
          path: ci_report.json
          retention-days: 30
